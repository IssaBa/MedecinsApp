/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import dao.ProfessionDAO;
import models.Profession;

/**
 *
 * @author A663588
 */
public class GestionProfession extends javax.swing.JInternalFrame {

    /**
     * Creates new form GestionProfession
     */
    DefaultTableModel model = new DefaultTableModel();
    Long idUpdateJtable;

    public void remplirTableProfession() {
        try {
            model.setRowCount(0);
            ProfessionDAO dao = new ProfessionDAO();

            model.setColumnIdentifiers(new String[]{"ID", "LIBELLE"});

            List<Profession> professions = dao.getAllProfession();
            if (professions.size() > 0) {

                for (int i = 0; i < professions.size(); i++) {
                    model.addRow(new String[]{professions.get(i).getId().toString(), professions.get(i).getLibelle()});
                }
                tableProfession.setModel(model);
                tableProfession.setEnabled(false);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public boolean isValueValide(Object[] value) {
        int size = model.getRowCount();
        for (int i = 0; i < size; i++) {
            if (value[0].equals(model.getValueAt(i, 0))) {
                return false;
            }
        }
        return true;
    }

    public void checkChoixSelect(String choixAction) {
        try {
            if (choixAction.equalsIgnoreCase("")) {
                desactiverChamps();
            } else if (choixAction.equalsIgnoreCase("AJOUTER PROFESSION")) {
                activerChamps();
                choixBTX.setText("AJOUTER PROFESSION");
                libelle.setText("");
                libelle.setEnabled(true);

            } else if (choixAction.equalsIgnoreCase("MODIFIER PROFESSION")) {
                activerChamps();
                choixBTX.setText("MODIFIER PROFESSION");
                tableProfession.setEnabled(true);
                libelle.setText("");
                libelle.setEnabled(true);
            } else if (choixAction.equalsIgnoreCase("SUPRIMER PROFESSION")) {
                activerChamps();
                choixBTX.setText("SUPRIMER PROFESSION");
                tableProfession.setEnabled(true);
                libelle.setText("");
                libelle.setEnabled(false);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void remplirComboChoix() {
        ComboChoix.removeAll();
        try {
            for (int i = 0; i < listItemCombo().size(); i++) {
                ComboChoix.addItem(listItemCombo().get(i));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public List<String> listItemCombo() {
        try {
            List<String> list = new ArrayList<String>();
            list.add("");
            list.add("AJOUTER PROFESSION");
            list.add("MODIFIER PROFESSION");
            list.add("SUPRIMER PROFESSION");
            return list;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    public void desactiverChamps() {
        labelprofession.setVisible(false);
        libelle.setVisible(false);
        choixBTX.setVisible(false);
    }

    public void activerChamps() {
        labelprofession.setVisible(true);
        libelle.setVisible(true);
        choixBTX.setVisible(true);
    }

    public void viderChamps() {
        labelprofession.setText("");
        labelprofession.setText("");
        libelle.setText("");
    }

    private void refrechALL() {
        desactiverChamps();
        remplirComboChoix();
        model.setRowCount(0);
        remplirTableProfession();
    }

    public GestionProfession() {
        initComponents();
        refrechALL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ComboChoix = new javax.swing.JComboBox<>();
        labelprofession = new javax.swing.JLabel();
        libelle = new javax.swing.JTextField();
        choixBTX = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProfession = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Choix Action");

        ComboChoix.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboChoixItemStateChanged(evt);
            }
        });

        labelprofession.setText("Libelle Proffession");

        choixBTX.setText("jButton1");
        choixBTX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choixBTXActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ComboChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(labelprofession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(libelle, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(choixBTX, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboChoix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(libelle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelprofession))
                .addGap(81, 81, 81)
                .addComponent(choixBTX)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableProfession.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tableProfession.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableProfession.setEditingColumn(0);
        tableProfession.setEditingRow(0);
        tableProfession.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProfessionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProfession);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableProfessionMouseClicked(java.awt.event.MouseEvent evt) {

        String combo = ComboChoix.getSelectedItem().toString();
        if (!combo.equalsIgnoreCase("") && !combo.equalsIgnoreCase("AJOUTER PROFESSION")) {

            DefaultTableModel defaultTableModel = (DefaultTableModel) tableProfession.getModel();
            int selectRowsIndex = tableProfession.getSelectedRow();
            libelle.setText(defaultTableModel.getValueAt(selectRowsIndex, 1).toString());

            ProfessionDAO dao = new ProfessionDAO();
            Profession p = dao.findProfessionByLibeller(defaultTableModel.getValueAt(selectRowsIndex, 1).toString());
            //JOptionPane.showMessageDialog (null, p.getLibelle() , "GESTION PROFESSION" , JOptionPane.ERROR_MESSAGE);

            if (p != null) {
                this.idUpdateJtable = p.getId();
            }
        }

    }

    private void choixBTXActionPerformed(java.awt.event.ActionEvent evt) {
        try {

            ProfessionDAO dao = new ProfessionDAO();

            if (choixBTX.getText().equalsIgnoreCase("AJOUTER PROFESSION")) {

                Profession professionCheck = dao.findProfessionByLibeller(libelle.getText().toString());

                if (professionCheck != null) {

                    JOptionPane.showMessageDialog(null, "CETTE PROFESSION EXISTE DEJA MERCI !", "GESTION PROFESSION", JOptionPane.ERROR_MESSAGE);
                    remplirTableProfession();
                } else {
                    //System.out.println("Libelle :  null");
                    Profession newProfession = new Profession();
                    newProfession.setLibelle(libelle.getText());
                    dao.saveProfession(newProfession);
                    JOptionPane.showMessageDialog(null, "PROFESSION AJOUTER AVEC SUCCESS", "GESTION PROFESSION", JOptionPane.INFORMATION_MESSAGE);
                    model.setRowCount(0);
                    remplirTableProfession();
                    viderChamps();
                }

            } else if (choixBTX.getText().equalsIgnoreCase("MODIFIER PROFESSION")) {
                if (libelle.getText().equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(null, "LE LIBELLE NE DOIT PAS ETRE VIDE !", "GESTION PROFESSION", JOptionPane.ERROR_MESSAGE);
                } else {
                    Profession newProfession = new Profession();

                    newProfession.setId(idUpdateJtable);
                    newProfession.setLibelle(libelle.getText());
                    dao.updateProfession(newProfession);
                    JOptionPane.showMessageDialog(null, "PROFESSION MODIFIER AVEC SUCCESS", "GESTION PROFESSION", JOptionPane.INFORMATION_MESSAGE);
                    remplirTableProfession();
                    viderChamps();
                    //remplirComboChoix();
                }

            } else if (choixBTX.getText().equalsIgnoreCase("SUPRIMER PROFESSION")) {
                if (libelle.getText().equalsIgnoreCase("")) {
                    JOptionPane.showMessageDialog(null, "LE LIBELLE NE DOIT PAS ETRE VIDE !", "GESTION PROFESSION", JOptionPane.ERROR_MESSAGE);
                } else {
                    Profession newProfession = new Profession();

                    newProfession.setId(idUpdateJtable);
                    newProfession.setLibelle(libelle.getText());
                    if (dao.deleteProfession(newProfession)) {
                        JOptionPane.showMessageDialog(null, "PROFESSION SUPRIMER AVEC SUCCESS", "GESTION PROFESSION", JOptionPane.INFORMATION_MESSAGE);
                        remplirTableProfession();
                        viderChamps();
                    } else {
                        JOptionPane.showMessageDialog(null, "ECHEC DE LA SUPPRESSION", "GESTION PROFESSION", JOptionPane.ERROR_MESSAGE);
                    }

                    //remplirComboChoix();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void ComboChoixItemStateChanged(java.awt.event.ItemEvent evt) {
        checkChoixSelect(ComboChoix.getSelectedItem().toString());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboChoix;
    private javax.swing.JButton choixBTX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelprofession;
    private javax.swing.JTextField libelle;
    private javax.swing.JTable tableProfession;
    // End of variables declaration//GEN-END:variables
}
