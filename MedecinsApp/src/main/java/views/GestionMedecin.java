/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import dao.AntecedantDAO;
import dao.ClasseAntecedantDAO;
import dao.MedecinUserDAO;
import models.Antecedent;
import models.ClasseAntecedent;
import models.MedecinUser;

/**
 *
 * @author A663588
 */
public class GestionMedecin extends javax.swing.JInternalFrame {

    /**
     * Creates new form GestionMedecin
     */
	
	DefaultTableModel model = new DefaultTableModel();
	
	 boolean reset = false;
	 long idModif = 0 ;

	public void remplirTableMedecin() {
	
	        try {
	        	  model.setRowCount(0);
	        	
	            MedecinUserDAO dao = new MedecinUserDAO();

	            model.setColumnIdentifiers(new String[]{"ID", "USERNAME","NOM","PRENOM"});

	            List<MedecinUser> medecinUsers = dao.getAllMedecinuser();
	            	
	            if (medecinUsers.size() > 0) {

	                for (int i = 0; i < medecinUsers.size(); i++) {
	                    model.addRow(new String[]{medecinUsers.get(i).getId().toString(), medecinUsers.get(i).getUsername(), medecinUsers.get(i).getNom(), medecinUsers.get(i).getPrenom()});
	                }
	                tableMedecin.setModel(model);
	              
	            }else {
	            	return ;
	            }

	        } catch (Exception e) {
	            e.printStackTrace();
	        }

	    }
	 
	 
	public void remplirComboChoix() {
	    	ComboChoix.removeAll();
	        try {
	            for (int i = 0; i < listItemCombo().size(); i++) {
	            	ComboChoix.addItem(listItemCombo().get(i));
	            }

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	    }
	 
	public List<String> listItemCombo() {
	        try {
	            ArrayList<String> list = new ArrayList<String>();
	            list.add("");
	            list.add("AJOUTER  MEDECIN");
	            list.add("MODIFIER  MEDECIN");
	            list.add("SUPPRIMER  MEDECIN");
	            if (list.size() > 0) {
	                return list;
	            } else {
	                return null;
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }

	        return null;
	    }
	 
	 
	public void checkChoixSelect(String choixAction) {
	        try {
	            if (choixAction.equalsIgnoreCase("")) {
	                desactiverChamps();
	            } else if (choixAction.equalsIgnoreCase("AJOUTER  MEDECIN")) {
	                
	            	activerChamps();
	                choixBTX.setText("AJOUTER  MEDECIN");
	                
	                
	            } else if (choixAction.equalsIgnoreCase("MODIFIER  MEDECIN")) {
	            
	            	activerChamps();
	                choixBTX.setText("MODIFIER  MEDECIN");
	                
	                
	            } else if (choixAction.equalsIgnoreCase("SUPPRIMER  MEDECIN")) {
	                activerChamps();
	                choixBTX.setText("SUPPRIMER  MEDECIN");
	            }

	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	    }
	 
	public boolean verifChamps() {
		if(username.getText().equals("") || prenom.getText().equals("") || nom.getText().equals("") || password.getText().equals("")) {
			JOptionPane.showMessageDialog(null, "Tous les champs sont obligatoire Merci !" , "GESTION  MEDECIN", JOptionPane.ERROR_MESSAGE);
			return false;
		}else {
			return true;
		}
	}
	 
	public void desactiverChamps() {
	    	labeldonner.setVisible(false);
	    }
	 
	public void activerChamps() {
		 labeldonner.setVisible(true);
	}
	 
	 
	public void viderChamps() {
	    	nom.setText("");
			prenom.setText("");
			password.setText("");
			username.setText("");
	    }

	private void refrechALL() {
	    	desactiverChamps();
	    	remplirComboChoix();
	    	model.setRowCount(0);
	    	remplirTableMedecin();
	    	
	    }
	
    public GestionMedecin () {
        initComponents();
        refrechALL();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings ( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labeldonner = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        prenom = new javax.swing.JTextField();
        nom = new javax.swing.JTextField();
        choixBTX = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ComboChoix = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMedecin = new javax.swing.JTable();

        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setText("Username");

        jLabel3.setText("Prenom");

        jLabel4.setText("Nom");

        jLabel5.setText("Password");

        choixBTX.setText("jButton1");
        choixBTX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choixBTXActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout labeldonnerLayout = new javax.swing.GroupLayout(labeldonner);
        labeldonner.setLayout(labeldonnerLayout);
        labeldonnerLayout.setHorizontalGroup(
            labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labeldonnerLayout.createSequentialGroup()
                .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(labeldonnerLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(82, 82, 82)
                        .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(username)
                            .addComponent(prenom)
                            .addComponent(nom)
                            .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)))
                    .addGroup(labeldonnerLayout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(choixBTX, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        labeldonnerLayout.setVerticalGroup(
            labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(labeldonnerLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(prenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(labeldonnerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(choixBTX)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        jLabel2.setText("Choix Action");

        ComboChoix.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboChoixItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(95, 95, 95)
                .addComponent(ComboChoix, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ComboChoix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableMedecin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableMedecin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMedecinMouseClicked(evt);
            }
        });
        tableMedecin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMedecinKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableMedecin);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labeldonner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labeldonner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 45, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboChoixItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboChoixItemStateChanged
    	checkChoixSelect(ComboChoix.getSelectedItem().toString());
    }//GEN-LAST:event_ComboChoixItemStateChanged

    private void choixBTXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choixBTXActionPerformed
   	
    	// ajout Medecin
	    if (choixBTX.getText().equalsIgnoreCase("AJOUTER  MEDECIN")) {
	    	 MedecinUserDAO userDAO = new MedecinUserDAO();
	   		 if(verifChamps()) {
	   			 
	   			 MedecinUser medecinUserCheck = userDAO.findUserByMatricule(username.getText());
	   			 if(medecinUserCheck!=null) {
	   				JOptionPane.showMessageDialog(null, "CETTE MEDECIN EXISTE DEJA MERCI !", "GESTION  MEDECIN", JOptionPane.ERROR_MESSAGE);
		   			model.setRowCount(0);
		   			remplirTableMedecin();
		   			viderChamps();
    	   	
	   			 }else {
	   				
	   				 MedecinUser medecinUserNew = new MedecinUser();
	   				 medecinUserNew.setNom(nom.getText());
	   				 medecinUserNew.setPrenom(prenom.getText());
	   				 medecinUserNew.setPassword(password.getText());
	   				 medecinUserNew.setUsername(username.getText());
	   				 
	   				 if(userDAO.saveUser(medecinUserNew)) {
	   					 JOptionPane.showMessageDialog(null, "MEDECIN AJOUTER AVEC SUCCESS", "GESTION  MEDECIN", JOptionPane.INFORMATION_MESSAGE);
		   					 viderChamps();
				   			 reset = true;
				   			 model.setRowCount(0);
				   			 remplirTableMedecin();
	   				 }else {
	   					JOptionPane.showMessageDialog(null, "ECHEC AJOUT  MEDECIN", "GESTION  MEDECIN", JOptionPane.ERROR_MESSAGE);
			   			  remplirTableMedecin();
			   			  viderChamps();
	   				 }
	   			 }
	   		 }
	   	 }
	    
	    // Supresion Medecin
	    else if (choixBTX.getText().equalsIgnoreCase("SUPPRIMER  MEDECIN")) {
	    	 if(verifChamps()) {
	    		
	    		 MedecinUserDAO userDAO = new MedecinUserDAO();
	   			 MedecinUser medecinUserCheck = userDAO.findUserByMatricule(username.getText());
	   				
	   				 MedecinUser medecinUserNew = new MedecinUser();
	   				 medecinUserNew.setId(idModif);
	   				 JOptionPane.showMessageDialog (null,idModif ,"TEST", JOptionPane.ERROR_MESSAGE);
	   				 medecinUserNew.setNom(nom.getText());
	   				 medecinUserNew.setPrenom(prenom.getText());
	   				 medecinUserNew.setPassword(password.getText());
	   				 medecinUserNew.setUsername(username.getText());
	   				 
	   				MedecinUserDAO userDAO1 = new MedecinUserDAO();
	   				 
	   				 if(userDAO1.DeleteMedecinUser(medecinUserNew)) {
	   					 JOptionPane.showMessageDialog(null, "MEDECIN SUPPRIMER AVEC SUCCESS", "GESTION  MEDECIN", JOptionPane.INFORMATION_MESSAGE);
		   					 viderChamps();
				   			 reset = true;
				   			 model.setRowCount(0);
				   			 remplirTableMedecin();
	   					 
	   				 }else {
	   					JOptionPane.showMessageDialog(null, "ECHEC SUPPRESSION  MEDECIN", "GESTION  MEDECIN", JOptionPane.ERROR_MESSAGE);
			   			  remplirTableMedecin();
			   			  viderChamps();
	   			 }
	    	 }
	    }
	    
	    // Supresion Medecin
	    else if (choixBTX.getText().equalsIgnoreCase("MODIFIER  MEDECIN")) {
	    	 if(verifChamps()) {
	    		
	    		 MedecinUserDAO userDAO = new MedecinUserDAO();
	   			 MedecinUser medecinUserCheck = userDAO.findUserByMatricule(username.getText());
	   			 if(medecinUserCheck!=null) {
	   				
	   				JOptionPane.showMessageDialog(null, "CETTE MEDECIN EXISTE DEJA MERCI !", "GESTION  MEDECIN", JOptionPane.ERROR_MESSAGE);
		   			remplirTableMedecin();
		   			viderChamps();
    	   	
	   			 }else {
	   				
	   				 MedecinUser medecinUserNew = new MedecinUser();
	   				 medecinUserNew.setId(idModif);
	   				 JOptionPane.showMessageDialog (null,idModif ,"TEST", JOptionPane.ERROR_MESSAGE);
	   				 medecinUserNew.setNom(nom.getText());
	   				 medecinUserNew.setPrenom(prenom.getText());
	   				 medecinUserNew.setPassword(password.getText());
	   				 medecinUserNew.setUsername(username.getText());
	   				 
	   				 if(userDAO.UpdateMedecinUser(medecinUserNew)) {
	   					 JOptionPane.showMessageDialog(null, "MEDECIN MODIFER AVEC SUCCESS", "GESTION  MEDECIN", JOptionPane.INFORMATION_MESSAGE);
		   					 viderChamps();
				   			 reset = true;
				   			 model.setRowCount(0);
				   			 remplirTableMedecin();
			   			 
	   				 }else {
	   					JOptionPane.showMessageDialog(null, "ECHEC MODIFICATION  MEDECIN", "GESTION  MEDECIN", JOptionPane.ERROR_MESSAGE);
			   			  remplirTableMedecin();
			   			  viderChamps();
	   				 }
	   			 }
	    	 }
	    }
	    
	    
    }//GEN-LAST:event_choixBTXActionPerformed

    private void tableMedecinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMedecinKeyPressed

    }//GEN-LAST:event_tableMedecinKeyPressed

    private void tableMedecinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMedecinMouseClicked
    	 if(reset == true ) {

    		 if(tableMedecin.getSelectedRow()==-1) {
  			   return ;
             }else {
                 JOptionPane.showMessageDialog (null, "Merci de refaire le choix d'action (AJOUTER / MODIFER / SUPPRIMER )", "GESTION PROFESSION" , JOptionPane.ERROR_MESSAGE);
                 //desactiverChamps();
                 tableMedecin.setEnabled(false);
                 reset = false;
             }
         }else {

             if (ComboChoix.getSelectedItem().toString().equalsIgnoreCase("MODIFIER  MEDECIN") || ComboChoix.getSelectedItem().toString().equalsIgnoreCase("SUPPRIMER  MEDECIN")) {

                 DefaultTableModel defaultTableModel = (DefaultTableModel) tableMedecin.getModel();
                 int selectRowsIndex = tableMedecin.getSelectedRow();

                 //JOptionPane.showMessageDialog (null,selectRowsIndex ,"TEST", JOptionPane.ERROR_MESSAGE);

                 MedecinUserDAO userDAO = new MedecinUserDAO();

                 MedecinUser medecinUser = userDAO.findUserByMatricule(defaultTableModel.getValueAt(selectRowsIndex, 1).toString());

                 if(medecinUser!=null) {
                	 idModif = medecinUser.getId();
                     prenom.setText(medecinUser.getPrenom());
                     nom.setText(medecinUser.getNom());
                     username.setText(medecinUser.getUsername());
                     username.setText(medecinUser.getUsername());
                     password.setText(medecinUser.getPassword());
                     

                 }else {
                     JOptionPane.showMessageDialog (null, "ANTECEDANT N'EXISTE PAS", "GESTION PROFESSION" , JOptionPane.ERROR_MESSAGE);
                 }

             }
         }
    }//GEN-LAST:event_tableMedecinMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboChoix;
    private javax.swing.JButton choixBTX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel labeldonner;
    private javax.swing.JTextField nom;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField prenom;
    private javax.swing.JTable tableMedecin;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
