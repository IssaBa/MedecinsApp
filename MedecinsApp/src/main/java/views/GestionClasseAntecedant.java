/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import dao.ClasseAntecedantDAO;
import dao.ProfessionDAO;
import models.ClasseAntecedent;
import models.Profession;

/**
 *
 * @author A663588
 */
public class GestionClasseAntecedant extends javax.swing.JInternalFrame {

    /**
     * Creates new form GestionClasseAntecedant
     */
	
	DefaultTableModel model = new DefaultTableModel();
    Long idUpdateJtable;
    String libeleModif = null;
    boolean reset = false;

    public void remplirTableCLASSEANTECEDANT() {
        try {
            model.setRowCount(0);
            ClasseAntecedantDAO dao = new ClasseAntecedantDAO();

            model.setColumnIdentifiers(new String[]{"ID", "LIBELLE"});

            List<ClasseAntecedent> classeAntecedents = dao.getAllClasseAntecedent();
            if (classeAntecedents.size() > 0) {

                for (int i = 0; i < classeAntecedents.size(); i++) {
                    model.addRow(new String[]{classeAntecedents.get(i).getId().toString(), classeAntecedents.get(i).getLibelle()});
                }
                tableClasseAntecedant.setModel(model);
                tableClasseAntecedant.setEnabled(false);
            }else {
            	 tableClasseAntecedant.setEnabled(true);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    
    
    public void checkChoixSelect(String choixAction) {
        try {
            if (choixAction.equalsIgnoreCase("")) {
                desactiverChamps();
            } else if (choixAction.equalsIgnoreCase("AJOUTER CLASSE ANTECEDANT")) {
                
            	activerChamps();
                choixBTX.setText("AJOUTER CLASSE ANTECEDANT");
                
                
            } else if (choixAction.equalsIgnoreCase("MODIFIER CLASSE ANTECEDANT")) {
            
            	activerChamps();
                choixBTX.setText("MODIFIER CLASSE ANTECEDANT");
                
                
            } else if (choixAction.equalsIgnoreCase("SUPRIMER CLASSE ANTECEDANT")) {
                activerChamps();
                choixBTX.setText("SUPRIMER CLASSE ANTECEDANT");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void remplirComboChoix() {
        ComboChoix.removeAll();
        try {
            for (int i = 0; i < listItemCombo().size(); i++) {
                ComboChoix.addItem(listItemCombo().get(i));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public List<String> listItemCombo() {
        try {
            ArrayList<String> list = new ArrayList<String>();
            list.add("");
            list.add("AJOUTER CLASSE ANTECEDANT");
            list.add("MODIFIER CLASSE ANTECEDANT");
            list.add("SUPRIMER CLASSE ANTECEDANT");
            if (list.size() > 0) {
                return list;
            } else {
                return null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    public void desactiverChamps() {
    	libelleAntecedant.setVisible(false);
    	tableClasseAntecedant.setEnabled(false);
        libelle.setVisible(false);
      
        libelleAntecedant.setText("");
        choixBTX.setVisible(false);
    }

    public void activerChamps() {
    	libelleAntecedant.setVisible(true);
    	tableClasseAntecedant.setEnabled(true);
        libelle.setVisible(true);
        tableClasseAntecedant.setVisible(true);
        libelleAntecedant.setText("");
        choixBTX.setVisible(true);
    }

    public void viderChamps() {
    	libelleAntecedant.setText("");
        }

    private void refrechALL() {
        desactiverChamps();
        remplirComboChoix();
        model.setRowCount(0);
        remplirTableCLASSEANTECEDANT();
    }
    
	
	
    public GestionClasseAntecedant () {
        initComponents();
        refrechALL();
       // checkChoixSelect(ComboChoix.getSelectedItem().toString());
        
    }
    
    public void afterActionChoix() {
		tableClasseAntecedant.setEnabled(false);
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings ( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ComboChoix = new javax.swing.JComboBox<>();
        libelle = new javax.swing.JLabel();
        libelleAntecedant = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClasseAntecedant = new javax.swing.JTable();
        choixBTX = new javax.swing.JButton();

        jLabel1.setText("Choix Action");

        ComboChoix.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboChoixItemStateChanged(evt);
            }
        });

        libelle.setText("Libelle Ant√©cedant");

        tableClasseAntecedant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableClasseAntecedant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClasseAntecedantMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableClasseAntecedant);

        choixBTX.setText("jButton2");
        choixBTX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choixBTXActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(libelle, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(libelleAntecedant)
                            .addComponent(ComboChoix, 0, 164, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(choixBTX, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ComboChoix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(libelle)
                            .addComponent(libelleAntecedant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(choixBTX))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableClasseAntecedantMouseClicked(java.awt.event.MouseEvent evt) {
       
    	try {
    		if(reset == true) {
    			JOptionPane.showMessageDialog (null, "Merci de refaire le choix d'action (AJOUTER / MODIFER / SUPPRIMER )", "GESTION PROFESSION" , JOptionPane.ERROR_MESSAGE);
    			//desactiverChamps();
    			reset = false;
    		}else {
    	     String combo = ComboChoix.getSelectedItem().toString();
    	        if (!combo.equalsIgnoreCase("") && !combo.equalsIgnoreCase("AJOUTER CLASSE ANTECEDANT")) {

    	            DefaultTableModel defaultTableModel = (DefaultTableModel) tableClasseAntecedant.getModel();
    	            int selectRowsIndex = tableClasseAntecedant.getSelectedRow();
    	           // libelle.setText(defaultTableModel.getValueAt(selectRowsIndex, 1).toString());

    	        	ClasseAntecedantDAO classeAntecedantDAO = new ClasseAntecedantDAO();
    	        	ClasseAntecedent classeAnt = classeAntecedantDAO.findClasseAntecedant(defaultTableModel.getValueAt(selectRowsIndex, 1).toString());
    	            //JOptionPane.showMessageDialog (null, classeAnt.getLibelle() , "GESTION PROFESSION" , JOptionPane.ERROR_MESSAGE);

    	            if (classeAnt != null) {
    	                this.idUpdateJtable = classeAnt.getId();
    	                libeleModif = classeAnt.getLibelle();
    	                libelleAntecedant.setText(classeAnt.getLibelle());
    	                
    	            }else {
    	            	JOptionPane.showMessageDialog (null, "CLASSE ANTECEDANT "+classeAnt.getLibelle()+"N'EXISTE PAS", "GESTION PROFESSION" , JOptionPane.ERROR_MESSAGE);
    	            }
    	        }
    		}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
    }

    private void choixBTXActionPerformed(java.awt.event.ActionEvent evt) {
    	
    	ClasseAntecedantDAO classeAntecedantDAO = new ClasseAntecedantDAO();
    	
    	// Ajout Classe  Antecedant
    	if (choixBTX.getText().equalsIgnoreCase("AJOUTER CLASSE ANTECEDANT")) {
    		 ClasseAntecedent  classeAntecedentCheck = classeAntecedantDAO.findClasseAntecedant(libelleAntecedant.getText());
    		 if(classeAntecedentCheck==null) {
    			
    			 ClasseAntecedent classeAntecedentnew =  new ClasseAntecedent();
    			 classeAntecedentnew.setLibelle(libelleAntecedant.getText());
    			 if(classeAntecedantDAO.saveClasseAntecedant(classeAntecedentnew)) {
    				  
    				 JOptionPane.showMessageDialog(null, "CLASSE ANTECEDANT AJOUTER AVEC SUCCESS", "GESTION CLASSE ANTECEDANT", JOptionPane.INFORMATION_MESSAGE);
    				  model.setRowCount(0);
    				  remplirTableCLASSEANTECEDANT();
    				  viderChamps();
    				  reset = true;
    				  
    			 }else {
    				 
    				 JOptionPane.showMessageDialog(null, "ECHEC AJOUT CLASSE ANTECEANT", "GESTION CLASSE ANTECEDANT", JOptionPane.ERROR_MESSAGE);
    				  model.setRowCount(0);
	   				  remplirTableCLASSEANTECEDANT();
	   				  viderChamps();

    			 }
    			 
    			 
    		 }else {
    			 JOptionPane.showMessageDialog(null, "CETTE  CLASSE ANTECEDANT EXISTE DEJA MERCI !", "GESTION CLASSE ANTECEDANT", JOptionPane.ERROR_MESSAGE);
    			  model.setRowCount(0);
  				  remplirTableCLASSEANTECEDANT();
  				  viderChamps();
    		 }
    	 }
    	
    	//Modification  Classe  Antecedant
    	else if (choixBTX.getText().equalsIgnoreCase("MODIFIER CLASSE ANTECEDANT")) {
    		 ClasseAntecedent  classeAntecedentCheck = classeAntecedantDAO.findClasseAntecedant(libeleModif);
    		 if(classeAntecedentCheck!=null) {
     			 ClasseAntecedent classeAntecedentmodif =  new ClasseAntecedent();
     			 ClasseAntecedantDAO dao = new ClasseAntecedantDAO();
     			 
     			 classeAntecedentmodif.setId(idUpdateJtable);
    			 classeAntecedentmodif.setLibelle(libelleAntecedant.getText());
    			
    			 if(dao.updateClasseAntecedent(classeAntecedentmodif)) {
    				 
    				 JOptionPane.showMessageDialog(null, "CLASSE ANTECEDANT MODIFER AVEC SUCCESS", "GESTION CLASSE ANTECEDANT", JOptionPane.INFORMATION_MESSAGE);
    				  model.setRowCount(0);
    				  remplirTableCLASSEANTECEDANT();
    				  viderChamps();
    				  reset = true;
    				  
    			 }else {

    				 JOptionPane.showMessageDialog(null, "ECHEC MODIFICATION CLASSE ANTECEANT", "GESTION CLASSE ANTECEDANT", JOptionPane.ERROR_MESSAGE);
    				 model.setRowCount(0);
	   				 remplirTableCLASSEANTECEDANT();
	   				 viderChamps();
	   				 
    			 }
    			 
    			 
    		 }else {
    			 JOptionPane.showMessageDialog(null, "CETTE  CLASSE ANTECEDANT N'EXISTE  MERCI !", "GESTION CLASSE ANTECEDANT", JOptionPane.ERROR_MESSAGE);
                 remplirTableCLASSEANTECEDANT();
    		 }
    		 
    	 }
    	// Suprimer Classe Antecedant
    	else if (choixBTX.getText().equalsIgnoreCase("SUPRIMER CLASSE ANTECEDANT")) {
   		 ClasseAntecedent  classeAntecedentCheck = classeAntecedantDAO.findClasseAntecedant(libeleModif);
   		 if(classeAntecedentCheck!=null) {
    			 ClasseAntecedent classeAntecedentsup =  new ClasseAntecedent();
    			 ClasseAntecedantDAO dao = new ClasseAntecedantDAO();
    			 
    			 classeAntecedentsup.setId(idUpdateJtable);
    			 classeAntecedentsup.setLibelle(libelleAntecedant.getText());
   			
   			 if(dao.deleteProfession(classeAntecedentsup)) {
   				  
   				 JOptionPane.showMessageDialog(null, "CLASSE ANTECEDANT SUPPRER AVEC SUCCESS", "GESTION CLASSE ANTECEDANT", JOptionPane.INFORMATION_MESSAGE);
   				 model.setRowCount(0);
   				 remplirTableCLASSEANTECEDANT();
   				 viderChamps();
   			 	 reset = true;
   				
   				  
   			 }else {
   				 
   				 JOptionPane.showMessageDialog(null, "ECHEC SUPPRESSION CLASSE ANTECEANT", "GESTION CLASSE ANTECEDANT", JOptionPane.ERROR_MESSAGE);
   				 model.setRowCount(0);
   				 remplirTableCLASSEANTECEDANT();
   				 viderChamps();
   				 
   			 }
   			 
   			 
   		 }else {
   			 JOptionPane.showMessageDialog(null, "CETTE  CLASSE ANTECEDANT N'EXISTE  MERCI !", "GESTION CLASSE ANTECEDANT", JOptionPane.ERROR_MESSAGE);
                remplirTableCLASSEANTECEDANT();
   		 }
   		 
   	 }
    }

    private void ComboChoixItemStateChanged(java.awt.event.ItemEvent evt) {
     checkChoixSelect(ComboChoix.getSelectedItem().toString());   
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboChoix;
    private javax.swing.JButton choixBTX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel libelle;
    private javax.swing.JTextField libelleAntecedant;
    private javax.swing.JTable tableClasseAntecedant;
    // End of variables declaration//GEN-END:variables
}
